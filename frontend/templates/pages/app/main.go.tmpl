{{ define "main" }}
{{ template "app" . }}{{ end }}
{{ define "page" }}
<form onsubmit="return false;">
  <input placeholder="Search" type="search" oninput="searchAccounts(this.value)" />
</form>

<nav>
  <a href="/export">Export</a>
  <a href="/import">Import</a>
  <a href="/create">New Account</a>
</nav>

<table>
  <thead>
    <tr>
      <th>Platform</th>
      <th>Identifier</th>
      <th>Passphrase</th>
    </tr>
  </thead>

  <tbody>
  </tbody>
</table>
{{ end }}
{{ define "script" }}
<script>
  const accounts = {{ .Accounts }};

  function searchAccounts(query) {
    const filteredAccounts = accounts.filter(account =>
      account.platform.toLowerCase().includes(query.toLowerCase()) ||
      account.identifier.toLowerCase().includes(query.toLowerCase()) ||
      account.notes.toLowerCase().includes(query.toLowerCase())
    );
    renderAccounts(filteredAccounts, query);
  }

  function renderAccounts(accounts, query = '') {
    const tbody = document.querySelector('tbody');
    tbody.innerHTML = '';
    for (const account of accounts) {
      const row = document.createElement('tr');

      const platformCell = document.createElement('td');
      const platformButton = document.createElement('button');
      platformButton.type = 'button';
      platformButton.innerHTML = highlightText(account.platform, query);
      platformButton.addEventListener('click', () => window.location.href = `/accounts/${account.id}`);
      platformCell.appendChild(platformButton);
      row.appendChild(platformCell);

      const identifierCell = document.createElement('td');
      const identifierButton = document.createElement('button');
      identifierButton.type = 'button';
      identifierButton.innerHTML = highlightText(account.identifier, query);
      identifierButton.addEventListener('click', () => copyText(account.identifier));
      identifierCell.appendChild(identifierButton);
      row.appendChild(identifierCell);

      const passphraseCell = document.createElement('td');
      const passphraseButton = document.createElement('button');
      passphraseButton.type = 'button';
      passphraseButton.textContent = 'Copy';
      passphraseButton.addEventListener('click', () => copyPassphrase(account.id));
      passphraseCell.appendChild(passphraseButton);
      row.appendChild(passphraseCell);

      tbody.appendChild(row);
    }
  }

  function highlightText(text, query) {
    if (!query) return text;
    const regex = new RegExp(`(${query})`, 'gi');
    return text.replace(regex, '<mark>$1</mark>');
  }

  renderAccounts(accounts);

  // Simple LRU Cache implementation
  class LRUCache {
    constructor(limit = 10) {
      this.limit = limit;
      this.cache = new Map();
    }
    get(key) {
      if (!this.cache.has(key)) return undefined;
      const value = this.cache.get(key);
      // Move to end to show that it was recently used
      this.cache.delete(key);
      this.cache.set(key, value);
      return value;
    }
    set(key, value) {
      if (this.cache.has(key)) {
        this.cache.delete(key);
      } else if (this.cache.size >= this.limit) {
        // Remove least recently used
        const firstKey = this.cache.keys().next().value;
        this.cache.delete(firstKey);
      }
      this.cache.set(key, value);
    }
  }

  const passphraseCache = new LRUCache(10);

  function copyPassphrase(id) {
    const cached = passphraseCache.get(id);
    if (cached !== undefined) {
      copyText(cached);
      return;
    }
    fetch(`/api/accounts/${id}`, { credentials: 'include' })
    .then(response => response.json())
    .then(data => {
      passphraseCache.set(id, data);
      copyText(data);
    });
  }

  function copyText(text) {
    navigator.clipboard.writeText(text).catch(error => {
      const textarea = document.createElement('textarea');
      textarea.value = text;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);
    });
  }
</script>
{{ end }}