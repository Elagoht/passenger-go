{{ define "main" }}
{{ template "app" . }}{{ end }}
{{ define "page" }}
<form onsubmit="return false;">
  <input required placeholder="Search accounts..." type="search" oninput="searchAccounts(this.value)" />
</form>

<div id="accounts-grid"></div>
{{ end }}
{{ define "script" }}
<script src="/static/components/account-card.js"></script>
<script>

  const accounts = {{ .Accounts }};
  let currentQuery = '';

  function searchAccounts(query) {
    currentQuery = query;
    const filteredAccounts = accounts.filter(account =>
      account.platform.toLowerCase().includes(query.toLowerCase()) ||
      account.identifier.toLowerCase().includes(query.toLowerCase()) ||
      (account.notes && account.notes.toLowerCase().includes(query.toLowerCase()))
    );
    renderAccounts(filteredAccounts, query);
  }

  function renderAccounts(accounts, query = '') {
    const grid = document.getElementById('accounts-grid');
    grid.innerHTML = '';
    
    // Apply grid styling
    grid.style.display = 'grid';
    grid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(16rem, 1fr))';
    grid.style.gap = '1rem';
    
    for (const account of accounts) {
      const card = document.createElement('account-card');
      card.setAttribute('data-account', JSON.stringify(account));
      card.setAttribute('data-query', query);
      grid.appendChild(card);
    }
  }

  // Event listeners for web component events
  document.addEventListener('copy-passphrase', (event) => {
    copyPassphrase(event.detail.id);
  });

  document.addEventListener('copy-text', (event) => {
    copyText(event.detail.text);
  });

  // Simple LRU Cache implementation
  class LRUCache {
    constructor(limit = 100) {
      this.limit = limit;
      this.cache = new Map();
    }
    get(key) {
      if (!this.cache.has(key)) return undefined;
      const value = this.cache.get(key);
      // Move to end to show that it was recently used
      this.cache.delete(key);
      this.cache.set(key, value);
      return value;
    }
    set(key, value) {
      if (this.cache.has(key)) {
        this.cache.delete(key);
      } else if (this.cache.size >= this.limit) {
        // Remove least recently used
        const firstKey = this.cache.keys().next().value;
        this.cache.delete(firstKey);
      }
      this.cache.set(key, value);
    }
  }

  const passphraseCache = new LRUCache(10);

  function copyPassphrase(id) {
    const cached = passphraseCache.get(id);
    if (cached !== undefined) {
      copyText(cached);
      return;
    }
    fetch(`/api/accounts/${id}`, { credentials: 'include' })
    .then(response => response.json())
    .then(data => {
      passphraseCache.set(id, data);
      copyText(data);
    });
  }

  function copyText(text) {
    navigator.clipboard.writeText(text).catch(error => {
      const textarea = document.createElement('textarea');
      textarea.value = text;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);
    });
  }

  // Initial render
  renderAccounts(accounts);

</script>
{{ end }}