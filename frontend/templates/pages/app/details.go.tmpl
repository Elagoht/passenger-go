{{ define "details" }}
{{ template "app" . }}{{ end }}
{{ define "page" }}
<h1>Account Details</h1>

{{ if .Message }}
<blockquote class="success">{{ .Message }}</blockquote>
{{ end }}

{{ if .Error }}
<blockquote class="error">{{ .Error }}</blockquote>
{{ end }}

<form action="/accounts/{{ .Account.Id }}" method="post" autocomplete="off" data-form-type="other">
  <label>
    <span>Platform</span>
    <input required type="text" name="platform" value="{{ .Account.Platform }}" />
  </label>

  <label>
    <span>Identifier</span>
    <input required type="text" name="identifier" value="{{ .Account.Identifier }}" list="identifiers-list" />
    <datalist id="identifiers-list">{{ range .Identifiers }}
      <option value="{{ . }}">{{ end }}
    </datalist>
  </label>

  <label>
    <span>URL</span>
    <input required type="url" autocomplete="off" data-form-type="other" name="url" value="{{ .Account.Url }}" list="urls-list" />
    <datalist id="urls-list">
    </datalist>
  </label>

  <label>
    <span>Passphrase</span>
    <div class="passphrase-input-container">
      <input required type="text" autocomplete="off" name="passphrase" value="{{ .Account.Passphrase }}" data-form-type="other" style="-webkit-text-security: disc; text-security: disc;" />
      <button type="button" class="eye-toggle" onclick="togglePassphraseVisibility()" title="Toggle passphrase visibility">
        <span class="eye-icon">👁️</span>
      </button>
    </div>
  </label>

  <div class="passphrase-actions">
    <button type="button" class="button-secondary" onclick="generatePassphrase()">Generate</button>
    <button type="button" class="button-secondary" onclick="alternatePassphrase()">Alternate</button>
  </div>

  <label>
    <span>Notes</span>
    <textarea name="notes">{{ .Account.Notes }}</textarea>
  </label>

  <button type="submit">Save</button>
</form>

<h2>Danger Zone</h2>

<button type="button" class="button-danger" onclick="deleteAccount()">Delete</button>
{{ end }}

{{ define "script" }}
<script src="/static/components/url-completion.js"></script>
<script>
  function togglePassphraseVisibility() {
    const input = document.querySelector('input[name="passphrase"]');
    const eyeIcon = document.querySelector('.eye-icon');
    
    if (input.style.webkitTextSecurity === 'disc' || input.style.textSecurity === 'disc') {
      // Show passphrase
      input.style.webkitTextSecurity = 'none';
      input.style.textSecurity = 'none';
      eyeIcon.textContent = '🙈';
    } else {
      // Hide passphrase
      input.style.webkitTextSecurity = 'disc';
      input.style.textSecurity = 'disc';
      eyeIcon.textContent = '👁️';
    }
  }

  async function generatePassphrase() {
    try {
      const response = await fetch('/api/generate/new?length=32', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        document.querySelector('input[name="passphrase"]').value = data.generated;
      } else {
        console.error('Failed to generate passphrase');
      }
    } catch (error) {
      console.error('Error generating passphrase:', error);
    }
  }

  async function alternatePassphrase() {
    const currentPassphrase = document.querySelector('input[name="passphrase"]').value;
    
    if (!currentPassphrase.trim()) {
      alert('Please enter a passphrase first to create an alternative version.');
      return;
    }

    try {
      const response = await fetch('/api/generate/alternative', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ passphrase: currentPassphrase })
      });
      
      if (response.ok) {
        const data = await response.json();
        document.querySelector('input[name="passphrase"]').value = data.alternative;
      } else {
        console.error('Failed to alternate passphrase');
      }
    } catch (error) {
      console.error('Error alternating passphrase:', error);
    }
  }

  function deleteAccount() {
    if (confirm('Are you sure you want to delete this account?')) {
      fetch('/api/accounts/{{ .Account.Id }}', {
        method: 'DELETE',
        credentials: 'include',
      }).then(() => {
        window.location.href = '/';
      }).catch((error) => {
        const errorElement = document.createElement('small');
        errorElement.textContent = 'Failed to delete account';
        document.querySelector('form').appendChild(errorElement);
      });
    }
  }
</script>
{{ end }}